% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SDEclassif.R
\name{SDEclassif}
\alias{SDEclassif}
\title{Name: SDEclassif
Title: A plug-in type classifier for a multiclass classification of SDE paths.}
\usage{
SDEclassif(
  Xtrain,
  ytrain,
  Xtest,
  ytest,
  NbClass,
  TimeStep,
  SetK,
  M,
  L,
  paths = FALSE
)
}
\arguments{
\item{Xtrain:}{a training sample sample which is a matrix or a data.frame whose columns represent the diffusion paths}

\item{ytrain:}{a second training sample which is a vector containing the labels of diffusion paths}

\item{Xtest:}{a test sample which is matrix or a data.frame containing in columns the trajectories to be classified}

\item{ytest:}{this test sample contains the respective labels of paths in the test set Xtest}

\item{NbClass:}{number of classes, an integer greater or equal to 2}

\item{TimeStep:}{time step for the discretization of the time interval}

\item{SetK:}{set of possible values of the dimension of the subspace spanned by the spline basis}

\item{M:}{degree of the spline basis}

\item{L:}{a constant allowing to control the coordinate vector of projections of the S.D.E. coefficient on the approximation space}

\item{paths=}{TRUE or FALSE: if paths=TRUE, then the function returns a plot representing the test data and the data in the predicted classes}
}
\value{
predicted labels
}
\description{
Name: SDEclassif
Title: A plug-in type classifier for a multiclass classification of SDE paths.
}
\examples{
## Diffusion model:
## b(x) = theta*(mu + nu x)
## sigma(x) = 1
## Class 1: theta = 1; mu = 1; nu = -1
## Class 2: theta = 1; mu = 0; nu = -1
## Class 3: theta = 2; mu = 1; nu = -1
## Simulation of data:
library(sde)
T = 1; x0 = 0; NbClass = 2;
N = 300      # (number of path)
n = 50       # (number of discretization steps)
TimeStep = 1/n; M = 3; L = log(N)
SetK = 2**(0:5)
## Probabilities of labels:
p = rep(1/NbClass, NbClass)
N1 = round(N/2); N2 = N - N1
ytrain = c(rep(1,N1), rep(2,N2)); ytest = c(rep(1,50), rep(2,50));
## Training sample:
X1 = sde.sim(t0=0,T=1,X0=x0,N=n+1,M=N1,theta=c(1,1,1),model="OU"); X1 <- as.matrix(X1)
X2 = sde.sim(t0=0,T=1,X0=x0,N=n+1,M=N2,theta=c(1,1,1),model="OU"); X2 <- as.matrix(X2)
Xtrain = cbind(X1,X2)
## Test sample
Xtest = matrix(ncol=100, nrow=n+2)
tX1 = sde.sim(t0=0,T=1,X0=x0,N=n+1,M=50,theta=c(1,1,1),model="OU"); tX1 <- as.matrix(tX1)
tX2 = sde.sim(t0=0,T=1,X0=x0,N=n+1,M=50,theta=c(1,1,1),model="OU"); tX2 <- as.matrix(tX2)
Xtest = cbind(tX1,tX2)
SDEclassif(Xtrain, ytrain, Xtest, ytest, NbClass, TimeStep, SetK, M, L, paths=TRUE)

}
